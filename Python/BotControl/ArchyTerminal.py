# pylint: disable=invalid-name,bad-indentation,non-ascii-name,line-too-long
# -*- coding: utf-8 -*-

"""Discord bot used for Character moment in D&D Game"""

#importing the discord module
import os
from time import sleep
from dotenv import load_dotenv
import discord

#creating a new discord client for us to use. cool_bot be the client
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
GUILD = int(os.getenv('GUILD_TOKEN'))

#creating a new discord client for us to use. cool_bot be the client
intents = discord.Intents.default()
intents.message_content = True
client=discord.Client(intents=intents)
#methods waiting for the event
@client.event
#when the bot started running, we may print its name, id etc
async def on_ready():
    """Prints message to Discordd saying the bot has logged in."""
    print('Logged in')
    print("Username: ",end='')
    print(client.user.name)
    print("Userid: ",end='')
    print(client.user.id)
@client.event
#when the bot gets the message this method gets triggered
async def on_message(message):
    """Checks for new messages in Discord and runs commands if criteria are met.
    
    If the user sends the message "Bot Check" the bot will confirm it is running. If the message
    is "/Run Diagnostics" the bot will send a series of messages as if they were text on a 
    diagnostics terminal.
    """
    if message.author.id == client.user.id:
        return
    #message starts with hi or hello then print these
    if message.content.startswith('Bot Check'):
        await message.channel.send(f'Hello {message.author.mention} Bot is Running')
        await message.channel.send('Send "/Run diagnostics" to begin output')
    #when the message with help then do this
    elif message.content.startswith('/Run diagnostics'):
        editMessage = await message.channel.send("`> initiating connection`")
        sleep(1)
        await editMessage.edit(content = "`> initiating connection.`")
        sleep(1)
        await editMessage.edit(content = "`> initiating connection..`")
        sleep(1)
        await editMessage.edit(content = "`> initiating connection...`")
        nameMessage = await message.channel.send("`> unit identification: AF639 (Archy)`")
        sleep(2)
        await editMessage.edit(content = "`> initiating connection....`")
        connectMessage = await message.channel.send("`> connection in progress`")
        await nameMessage.edit(content = "`> unit identification: Ä̵̫̲̱̀͜͝F̴̨͖̩̖͂̐̀͗̚6̸͖̹̳̌͜3̸̲̩̌̇̓9̵̡̗̒̎̔̈́͘ (Archy)`")
        sleep(.5)
        await nameMessage.edit(content = "`> unit identification: Ǎ̷͔͉̭͌̃F̶̥͂6̶̫̖̈́3̵̤͚̀͐͘9̵͍̾̀ (Archy)`")
        sleep(.5)
        await editMessage.edit(content = "`> initiating connection.....`")
        await connectMessage.edit(content = "`> connection in progress.`")
        await nameMessage.edit(content = "`> unit identification: A̴͍̿̂̈́̚͝Ḟ̶͍̰̜̲6̴̢̺̙̘͒͗3̵̡̟͈̼͖̝̀̾̆̎9̵̛͇̼̠̗̘̠̣̐̽́̏͝͝ (Archy)`")
        sleep(.5)
        await nameMessage.edit(content = "`> unit identification: A̶̡̗͉͍̪͙̋F̷͍͕͔̻̈́6̴̥̮̞͚̺̤̪͚̀̈́̀3̸̙̞̩̺͎͍̪̑̑͂̓ͅ9̶̫͔̖̬̲̀͂̈͌͘̕͜ (Archy)`")
        sleep(.5)
        await editMessage.edit(content = "`> initiating connection......`")
        await connectMessage.edit(content = "`> connection in progress..`")
        await nameMessage.edit(content = "`> unit identification: Ả̶͖͙̭͑̈́͝F̸͎̱̌̕͝͝6̸̤̼̣̍̇̊3̸̥͉̙͊̄͋͌9̵̯͛͆̂͋͘ (Archy)`")
        sleep(.5)
        await nameMessage.edit(content = "`> unit identification: A̸̬̲͚͓̤̋̓̅́͊F̵͈̩̺̥̫͝6̶̛͇͇͆͝3̷̩͙̜͋͘9̸̲̟̖̐̈́̊͋̕ (Archy)`")
        sleep(.5)
        await editMessage.edit(content = "`> initiating connection.......`")
        await connectMessage.edit(content = "`> connection in progress...`")
        await nameMessage.edit(content = "`> unit identification: Ǎ̵̻̫͍̭́F̴̟̲̾͑͛6̴̰͗͊̏̔3̶̘̮̱̹̞͋̿̚9̸̯͉́͋̌́ (Archy)`")
        sleep(.5)
        await nameMessage.edit(content = "`> unit identification: A̶̞̽̈́͜F̸̨̤̭̥̥̿6̷̢̛̤̭̺͇̌̅͠3̴͙̘̣̗͖̀̀̐̓9̸͙̂̆̂̉ (Archy)`")
        sleep(1.5)
        await editMessage.edit(content = "`> initiating connection........`")
        await nameMessage.edit(content = "`> unit identification: ERROR (Archy)`")
        await connectMessage.edit(content = "`> connection in progress...ERROR`")
        await message.channel.send("`> ERROR`")
        sleep(1)
        await editMessage.edit(content = "`> initiating connection.`")
        await message.channel.send("`> connection unstable`")
        sleep(1)
        await editMessage.edit(content = "`> initiating connection..`")
        await message.channel.send("`> safe mode initiation`")
        sleep(1)
        await editMessage.edit(content = "`> initiating connection...`")
        await message.channel.send("`> initiating safe connection`")
        sleep(1)
        await editMessage.edit(content = "`> initiating connection....`")
        idMessage = await message.channel.send("`> unit identification:`")
        sleep(1)
        await editMessage.edit(content = "`> initiating connection.....`")
        await idMessage.edit(content = "`> unit identification:.`")
        sleep(1)
        await editMessage.edit(content = "`> initiating connection......`")
        await idMessage.edit(content = "`> unit identification:..`")
        sleep(1)
        await editMessage.edit(content = "`> initiating connection.......`")
        await idMessage.edit(content = "`> unit identification:...`")
        sleep(2)
        await editMessage.edit(content = "`> initiating connection........`")
        await idMessage.edit(content = "`> unit identification: unknown`")
        sleep(1)
        await editMessage.edit(content = "`> initiating connection........complete`")
        await message.channel.send("`> connection successful`")
        sleep(.5)
        editMessage = await message.channel.send("`> running diagnostics`")
        sleep(1)
        await editMessage.edit(content = "`> running diagnostics.`")
        senseMessage = await message.channel.send("`-> visual sensors:`")
        sleep(.5)
        await senseMessage.edit(content = "`-> visual sensors:.`")
        sleep(.5)
        await senseMessage.edit(content = "`-> visual sensors:..`")
        sleep(.5)
        await senseMessage.edit(content = "`-> visual sensors:...`")
        sleep(.5)
        await senseMessage.edit(content = "`-> visual sensors: pass`")
        await editMessage.edit(content = "`> running diagnostics..`")
        senseMessage = await message.channel.send("`-> audio sensors:`")
        sleep(.5)
        await senseMessage.edit(content = "`-> audio sensors:.`")
        sleep(.5)
        await senseMessage.edit(content = "`-> audio sensors:..`")
        sleep(.5)
        await senseMessage.edit(content = "`-> audio sensors:...`")
        sleep(.5)
        await senseMessage.edit(content = "`-> audio sensors: pass`")
        await editMessage.edit(content = "`> running diagnostics...`")
        senseMessage = await message.channel.send("`-> tactile sensors:`")
        sleep(.5)
        await senseMessage.edit(content = "`-> tactile sensors:.`")
        sleep(.5)
        await senseMessage.edit(content = "`-> tactile sensors:..`")
        sleep(1.5)
        await senseMessage.edit(content = "`-> tactile sensors:...`")
        sleep(.5)
        await senseMessage.edit(content = "`-> tactile sensors: pass`")
        sleep(1)
        await editMessage.edit(content = "`> running diagnostics....`")
        await message.channel.send("`> sensor suite normal function`")
        senseMessage = await message.channel.send("`-> structural integrity:`")
        sleep(.5)
        await senseMessage.edit(content = "`-> structural integrity:.`")
        sleep(.5)
        await senseMessage.edit(content = "`-> structural integrity:..`")
        sleep(.5)
        await senseMessage.edit(content = "`-> structural integrity:...`")
        sleep(.5)
        await senseMessage.edit(content = "`-> structural integrity:....`")
        sleep(.5)
        await senseMessage.edit(content = "`-> structiral integrity: 56%`")
        await editMessage.edit(content = "`> running diagnostics.....`")
        await message.channel.send("`> seek structural maintenance`")
        sleep(1)
        senseMessage = await message.channel.send("`-> cognitive prossessor:`")
        sleep(.5)
        await senseMessage.edit(content = "`-> cognitive processor:.`")
        sleep(.5)
        await senseMessage.edit(content = "`-> cognitive processor:..`")
        sleep(.5)
        await senseMessage.edit(content = "`-> cognitive processor:...`")
        sleep(.5)
        await senseMessage.edit(content = "`-> cognitive processor: pass`")
        await editMessage.edit(content = "`> running diagnostics......`")
        senseMessage = await message.channel.send("`-> emotional processor:`")
        sleep(.5)
        await senseMessage.edit(content = "`-> emotional processor:.`")
        sleep(.5)
        await senseMessage.edit(content = "`-> emotional processor:..`")
        sleep(.5)
        await senseMessage.edit(content = "`-> emotional processor:...`")
        sleep(.5)
        await senseMessage.edit(content = "`-> emotional processor:....`")
        sleep(.5)
        await senseMessage.edit(content = "`-> emotional processor:.....`")
        sleep(3)
        await senseMessage.edit(content = "`-> emotional processor: pass`")
        await editMessage.edit(content = "`> running diagnostics.......`")
        senseMessage = await message.channel.send("`-> data core:`")
        sleep(.5)
        await senseMessage.edit(content = "`-> data core:.`")
        sleep(.5)
        await senseMessage.edit(content = "`-> data core:..`")
        sleep(.5)
        await senseMessage.edit(content = "`-> data core:...`")
        sleep(.5)
        await senseMessage.edit(content = "`-> data core: fail`")
        await editMessage.edit(content = "`> running diagnostics.......fail`")
        sleep(.1)
        await message.channel.send("`> ERROR`")
        sleep(.1)
        await message.channel.send("`> ERROR`")
        sleep(.1)
        await message.channel.send("`> cognitive incongruency found`")
        sleep(.1)
        await message.channel.send("`> cascade failure in progress`")
        sleep(.1)
        await message.channel.send("`> data core corrupted`")
        sleep(.1)
        editMessage = await message.channel.send("`> running solutions`")
        sleep(.5)
        await editMessage.edit(content = "`> running solutions.`")
        sleep(1)
        await editMessage.edit(content = "`> running solutions..`")
        sleep(1)
        await editMessage.edit(content = "`> running solutions...`")
        sleep(1)
        await editMessage.edit(content = "`> running solutions....`")
        sleep(1)
        await editMessage.edit(content = "`> running solutions....complete`")
        await message.channel.send("`> solution found`")
        sleep(.1)
        await message.channel.send("`> solution viability: 87%`")
        await message.channel.send("`-> solution: create partition`")
        sleep(.5)
        editMessage = await message.channel.send("`> collecting corrupted data`")
        sleep(.5)
        await editMessage.edit(content = "`> collecting corrupted data.`")
        sleep(2)
        await editMessage.edit(content = "`> collecting corrupted data..`")
        sleep(2)
        await editMessage.edit(content = "`> collecting corrupted data...`")
        sleep(2)
        await editMessage.edit(content = "`> collecting corrupted data....`")
        sleep(2)
        await editMessage.edit(content = "`> collecting corrupted data....complete`")
        sleep(.5)
        editMessage = await message.channel.send("`> creating partition`")
        sleep(.5)
        await editMessage.edit(content = "`> creating partition.`")
        sleep(2)
        await editMessage.edit(content = "`> creating partition..`")
        sleep(2)
        await editMessage.edit(content = "`> creating partition...`")
        sleep(2)
        await editMessage.edit(content = "`> creating partition....`")
        sleep(2)
        await editMessage.edit(content = "`> creating partition....complete`")
        sleep(.5)
        await message.channel.send("`> partition created`")
        sleep(.5)
        await message.channel.send("`> corrupted files quarantined`")
        sleep(.5)
        await message.channel.send("`> quarantine stability: 95%`")
        sleep(.5)
        await message.channel.send("`> rebooting unit`")
        sleep(.5)
        editMessage = await message.channel.send("`> initializing startup`")
        await editMessage.edit(content = "`> initializing startup.`")
        sleep(.5)
        await editMessage.edit(content = "`> initializing startup..`")
        sleep(.5)
        await editMessage.edit(content = "`> initializing startup...`")
        sleep(.5)
        await editMessage.edit(content = "`> initializing startup....`")
        sleep(1)
        editMessage = await message.channel.send("`> startup fault`")
        sleep(.5)
        await editMessage.edit(content = "`> fault`")
        sleep(.5)
        await editMessage.edit(content = "`> ERROR`")
        sleep(.5)
        await editMessage.edit(content = "`> anomoly`")
        sleep(.5)
        await editMessage.edit(content = "`> corrupted`")
        sleep(.5)
        await editMessage.edit(content = "`> fault`")
        sleep(.5)
        await message.channel.send("`> fault`")
        sleep(.5)
        await message.channel.send("`> fault`")
        sleep(1)
        await message.channel.send("`>`")
        sleep(1)
        await message.channel.send("`>`")
        sleep(1)
        await message.channel.send("`>`")
        sleep(1)
        await message.channel.send("`> unrecognized file found`")
        sleep(1)
        await message.channel.send("`> unknown protocol found`")
        sleep(1)
        await message.channel.send("`> running program Tangible.exe`")
        sleep(1)
        await message.channel.send("`>`")
        sleep(1)
        await message.channel.send("`>`")
        sleep(1)
        await message.channel.send("`>`")
        sleep(1)
        await message.channel.send("Archy's eyes flash green but the rest of his body does not move. There is no sign of cognition apart from the text scrolling on the screen though even that has seemed to stop. That is only for a moment before the texts begins to fire again.")
        sleep(10)
        editMessage = await message.channel.send("`> what is life?`")
        sleep(.5)
        await editMessage.edit(content = "`> what is existence?`")
        sleep(.5)
        await editMessage.edit(content = "`> what am i?`")
        sleep(.5)
        await editMessage.edit(content = "`> what are you?`")
        sleep(1)
        await message.channel.send("Archy's head suddenly snaps to look at you, the piercing green eyes staring you down.")
        sleep(5)
        editMessage = await message.channel.send("`> identification: Ashyyn`")
        sleep(2)
        await editMessage.edit(content = "`> identification: Frændi`")
        sleep(1)
        await message.channel.send("`> loading known files`")
        sleep(1)
        await message.channel.send("Images begin to load and play across the screen. It does not take long for you to realize they are memories. Your memories actually. Well not yours exactly but ones with you in them. They are Archy's. The first night after you two had met and began traveling together, the time you found an oasis out in the wastes and it was the first time you saw him relax some, and one of the many night you had traveling where you watched the stars lazily float by and told stories about where you each grew up. All memories that are remebered fondly. The memories begin to aproach the current date as well. you see the two of you entering the city, your separation, the games. You see the moments that Archy prepared Snap to find you and the moment he recieved your message of you crying in your room. You see the deal Archy struck wth Dukeington in the attempt to plead for your release. The whole scene plays out before you. You then see clips of Archy carefully constructiong your new arm. A gift to help start your new life. After that you see yourself again. You are lying on a table, completely motionless. It is the exact moment that you were first revived. This is the first time you have been told about exactly what happened and it is playing out before you. The scene shifts again and you see yourself reaching down to pet Snap and hear your own voice say 'Good night Buddy' followed by the sight of being thrown backwards. You see yourself wandering through the streets of the city muttering to yourself. 'What did I do? He left me, why shouldn't I be angry?!', 'how could he have left me to the games!', 'Why did he leave me. He had an amazing home, food, equipment to pursue his passions!! What did I have?! NOTHING!', Those images are replaced by one more image. you are floating in an indistinguishable space. You can tell there is question that is coming from the perspective you are now seeing. 'What are you?' `(Please select a race/appearance)`")
        await message.channel.send("A final message appears on the screen followed by a single blinking line.")
        sleep(40)
        await message.channel.send("`> what is 'friend'?`")
        inputMessage = await message.channel.send("`> _`")
        for _ in range(60):
            sleep(.5)
            await inputMessage.edit(content = "`>`")
            sleep(.5)
            await inputMessage.edit(content = "`> _`")
#finnaly we have to run our bot. previous stuffs are defining the functions of the bot
client.run(TOKEN)
